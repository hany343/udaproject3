version: 2.1

orbs:
  slack: circleci/slack@4.9.3

commands:
  notify_on_failure:
    steps:
      - slack/notify:
          event: fail
          channel: udacityproject
          template: basic_fail_1
  install_awscli:
    description: install aws cli2
    steps:
      - run:
          name: install aws cli2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: install ansible
    steps:
      - run:
          name: install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible

#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here   
#     steps:
#       - run:
#           name: Destroy environment
#           # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
#           # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
         
#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here     
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           command: |
#             # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#             #  cd ~/project/backend
#             #  npm install
#             #  Add revert code here. You can find this in the Getting Started section.
#               exit 1
#             fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - notify_on_failure

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - notify_on_failure

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Unit test front end
          command: |
            cd frontend
            npm install
            npm test
      - notify_on_failure

                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Unit test back end
          command: |
            cd backend
            npm install
            npm test
      - notify_on_failure
      
      
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front end
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
      - notify_on_failure

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
     - checkout
     - restore_cache:
          keys: [backend-build]
     - run:
          name: Scan back end
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
     - notify_on_failure

  deploy-infrastructure:
    docker:
      - image: cimg/base:2022.06
    steps:
      - checkout
      - install_awscli
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udaproject3 \
              --stack-name "udaproject3-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udaproject3 \
              --stack-name "udaproject3-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Value=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicAddress' \ 
              --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure      

  configure-infrastructure:
    docker:
      - image: cimg/base:2022.06
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["de:92:d8:f6:36:d8:f4:57:e5:de:f6:ec:e2:49:de:38"] # You can get this ID in the section where you registered the SSH Key
      - attach_workspace:
          at: ~/
      - run:
          name: configure server
          command: |
            cd .circleci/ansible
            cat inventory.txt
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
      # Here's where you will add some code to rollback on failure      

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#     steps:
#       # Checkout code from git
#       - run:
#           name: Run migrations
#           command: |
#             # Your code here
#             exit 1
#       - run:
#           name: Send migration results to memstash
#           command: |
#             # Your code here
#             exit 1
#      # Here's where you will add some code to rollback on failure      

#   deploy-frontend:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Deploy frontend objects
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure      
                    
#   deploy-backend:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       # Checkout code from git
#       # Add ssh keys with fingerprint
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Deploy backend
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   smoke-test:
#     docker:
#       - image: alpine:latest 
#     steps:
#       # Checkout code from git
#       - run: 
#           name: Install dependencies
#           command: |
#             apk add --update curl
#             # your code here
#       - run:
#           name: Get backend url
#           command: |
#             # your code here
#       - run:
#           name: Backend smoke test.
#           command: |
#             # your code here
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

#   cloudfront-update:
#     docker:
#       amazon/aws-cli
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             # your code here
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#       # Here's where you will add some code to rollback on failure  

# cleanup:
#     docker:
#       - image: amazon/aws-cli
#     steps:
#       - checkout
#       - run: yum install -y tar gzip
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Get old stack workflow id
#           command: |
#             command: |
#             export OldBucketID=$(cat ~/textfile.txt)
#             aws s3 rm "s3://${OldBucketID}" --recursive
#       - run:
#           name: Remove old stacks and files
#           command: |
#             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#             then
#               # your code here
#             fi
            
  notify_on_success:
    docker:
      - image: cimg/base:2022.06
    steps:
      - slack/notify:
          event: pass
          channel: udacityproject
          template: success_tagged_deployment_1

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - notify_on_success:
           requires:
            - test-frontend
            - test-backend
            - scan-backend
            - scan-frontend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      # - run-migrations:
      #     requires: [configure-infrastructure]
      # - deploy-frontend:
      #     requires: [run-migrations]
      # - deploy-backend:
      #     requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]